// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "file.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* File_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  File_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_file_2eproto() {
  protobuf_AddDesc_file_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "file.proto");
  GOOGLE_CHECK(file != NULL);
  File_descriptor_ = file->message_type(0);
  static const int File_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, oper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, stbuf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, rdev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, statvfs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, d_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, msg_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, buf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, fh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, res_),
  };
  File_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      File_descriptor_,
      File::default_instance_,
      File_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(File));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_file_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    File_descriptor_, &File::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_file_2eproto() {
  delete File::default_instance_;
  delete File_reflection_;
}

void protobuf_AddDesc_file_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nfile.proto\"\224\002\n\004File\022\014\n\004oper\030\001 \001(\005\022\014\n\004p"
    "ath\030\002 \001(\t\022\r\n\005stbuf\030\003 \001(\t\022\014\n\004mask\030\004 \001(\005\022\014"
    "\n\004mode\030\005 \001(\005\022\014\n\004rdev\030\006 \001(\003\022\014\n\004from\030\007 \001(\t"
    "\022\n\n\002to\030\010 \001(\t\022\013\n\003uid\030\t \001(\005\022\013\n\003gid\030\n \001(\005\022\014"
    "\n\004size\030\013 \001(\005\022\014\n\004flag\030\014 \001(\005\022\016\n\006offset\030\r \001"
    "(\005\022\017\n\007statvfs\030\016 \001(\005\022\016\n\006d_name\030\017 \003(\014\022\020\n\010m"
    "sg_size\030\020 \001(\005\022\013\n\003buf\030\021 \001(\014\022\n\n\002fh\030\022 \001(\003\022\013"
    "\n\003res\030\023 \001(\005", 291);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "file.proto", &protobuf_RegisterTypes);
  File::default_instance_ = new File();
  File::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_file_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_file_2eproto {
  StaticDescriptorInitializer_file_2eproto() {
    protobuf_AddDesc_file_2eproto();
  }
} static_descriptor_initializer_file_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int File::kOperFieldNumber;
const int File::kPathFieldNumber;
const int File::kStbufFieldNumber;
const int File::kMaskFieldNumber;
const int File::kModeFieldNumber;
const int File::kRdevFieldNumber;
const int File::kFromFieldNumber;
const int File::kToFieldNumber;
const int File::kUidFieldNumber;
const int File::kGidFieldNumber;
const int File::kSizeFieldNumber;
const int File::kFlagFieldNumber;
const int File::kOffsetFieldNumber;
const int File::kStatvfsFieldNumber;
const int File::kDNameFieldNumber;
const int File::kMsgSizeFieldNumber;
const int File::kBufFieldNumber;
const int File::kFhFieldNumber;
const int File::kResFieldNumber;
#endif  // !_MSC_VER

File::File()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:File)
}

void File::InitAsDefaultInstance() {
}

File::File(const File& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:File)
}

void File::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  oper_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stbuf_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_ = 0;
  mode_ = 0;
  rdev_ = GOOGLE_LONGLONG(0);
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = 0;
  gid_ = 0;
  size_ = 0;
  flag_ = 0;
  offset_ = 0;
  statvfs_ = 0;
  msg_size_ = 0;
  buf_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fh_ = GOOGLE_LONGLONG(0);
  res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

File::~File() {
  // @@protoc_insertion_point(destructor:File)
  SharedDtor();
}

void File::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (stbuf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stbuf_;
  }
  if (from_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_;
  }
  if (to_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete to_;
  }
  if (buf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buf_;
  }
  if (this != default_instance_) {
  }
}

void File::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* File::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return File_descriptor_;
}

const File& File::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_2eproto();
  return *default_instance_;
}

File* File::default_instance_ = NULL;

File* File::New() const {
  return new File;
}

void File::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<File*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(oper_, mask_);
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        path_->clear();
      }
    }
    if (has_stbuf()) {
      if (stbuf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        stbuf_->clear();
      }
    }
    mode_ = 0;
    rdev_ = GOOGLE_LONGLONG(0);
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        from_->clear();
      }
    }
    if (has_to()) {
      if (to_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        to_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 48896) {
    ZR_(gid_, offset_);
    ZR_(statvfs_, msg_size_);
    uid_ = 0;
  }
  if (_has_bits_[16 / 32] & 458752) {
    ZR_(fh_, res_);
    if (has_buf()) {
      if (buf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        buf_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  d_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool File::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:File)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 oper = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oper_)));
          set_has_oper();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // optional string path = 2;
      case 2: {
        if (tag == 18) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_stbuf;
        break;
      }

      // optional string stbuf = 3;
      case 3: {
        if (tag == 26) {
         parse_stbuf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stbuf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stbuf().data(), this->stbuf().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stbuf");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mask;
        break;
      }

      // optional int32 mask = 4;
      case 4: {
        if (tag == 32) {
         parse_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mask_)));
          set_has_mask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mode;
        break;
      }

      // optional int32 mode = 5;
      case 5: {
        if (tag == 40) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_rdev;
        break;
      }

      // optional int64 rdev = 6;
      case 6: {
        if (tag == 48) {
         parse_rdev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rdev_)));
          set_has_rdev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_from;
        break;
      }

      // optional string from = 7;
      case 7: {
        if (tag == 58) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "from");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_to;
        break;
      }

      // optional string to = 8;
      case 8: {
        if (tag == 66) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->to().data(), this->to().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "to");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_uid;
        break;
      }

      // optional int32 uid = 9;
      case 9: {
        if (tag == 72) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_gid;
        break;
      }

      // optional int32 gid = 10;
      case 10: {
        if (tag == 80) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_size;
        break;
      }

      // optional int32 size = 11;
      case 11: {
        if (tag == 88) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_flag;
        break;
      }

      // optional int32 flag = 12;
      case 12: {
        if (tag == 96) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_offset;
        break;
      }

      // optional int32 offset = 13;
      case 13: {
        if (tag == 104) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_statvfs;
        break;
      }

      // optional int32 statvfs = 14;
      case 14: {
        if (tag == 112) {
         parse_statvfs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statvfs_)));
          set_has_statvfs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_d_name;
        break;
      }

      // repeated bytes d_name = 15;
      case 15: {
        if (tag == 122) {
         parse_d_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_d_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_d_name;
        if (input->ExpectTag(128)) goto parse_msg_size;
        break;
      }

      // optional int32 msg_size = 16;
      case 16: {
        if (tag == 128) {
         parse_msg_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_size_)));
          set_has_msg_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_buf;
        break;
      }

      // optional bytes buf = 17;
      case 17: {
        if (tag == 138) {
         parse_buf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_fh;
        break;
      }

      // optional int64 fh = 18;
      case 18: {
        if (tag == 144) {
         parse_fh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fh_)));
          set_has_fh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_res;
        break;
      }

      // optional int32 res = 19;
      case 19: {
        if (tag == 152) {
         parse_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:File)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:File)
  return false;
#undef DO_
}

void File::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:File)
  // optional int32 oper = 1;
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oper(), output);
  }

  // optional string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // optional string stbuf = 3;
  if (has_stbuf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stbuf().data(), this->stbuf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stbuf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->stbuf(), output);
  }

  // optional int32 mask = 4;
  if (has_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mask(), output);
  }

  // optional int32 mode = 5;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mode(), output);
  }

  // optional int64 rdev = 6;
  if (has_rdev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->rdev(), output);
  }

  // optional string from = 7;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "from");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->from(), output);
  }

  // optional string to = 8;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "to");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->to(), output);
  }

  // optional int32 uid = 9;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->uid(), output);
  }

  // optional int32 gid = 10;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->gid(), output);
  }

  // optional int32 size = 11;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->size(), output);
  }

  // optional int32 flag = 12;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->flag(), output);
  }

  // optional int32 offset = 13;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->offset(), output);
  }

  // optional int32 statvfs = 14;
  if (has_statvfs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->statvfs(), output);
  }

  // repeated bytes d_name = 15;
  for (int i = 0; i < this->d_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      15, this->d_name(i), output);
  }

  // optional int32 msg_size = 16;
  if (has_msg_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->msg_size(), output);
  }

  // optional bytes buf = 17;
  if (has_buf()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      17, this->buf(), output);
  }

  // optional int64 fh = 18;
  if (has_fh()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->fh(), output);
  }

  // optional int32 res = 19;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:File)
}

::google::protobuf::uint8* File::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:File)
  // optional int32 oper = 1;
  if (has_oper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oper(), target);
  }

  // optional string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // optional string stbuf = 3;
  if (has_stbuf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stbuf().data(), this->stbuf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stbuf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stbuf(), target);
  }

  // optional int32 mask = 4;
  if (has_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mask(), target);
  }

  // optional int32 mode = 5;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mode(), target);
  }

  // optional int64 rdev = 6;
  if (has_rdev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->rdev(), target);
  }

  // optional string from = 7;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "from");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->from(), target);
  }

  // optional string to = 8;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "to");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->to(), target);
  }

  // optional int32 uid = 9;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->uid(), target);
  }

  // optional int32 gid = 10;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->gid(), target);
  }

  // optional int32 size = 11;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->size(), target);
  }

  // optional int32 flag = 12;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->flag(), target);
  }

  // optional int32 offset = 13;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->offset(), target);
  }

  // optional int32 statvfs = 14;
  if (has_statvfs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->statvfs(), target);
  }

  // repeated bytes d_name = 15;
  for (int i = 0; i < this->d_name_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(15, this->d_name(i), target);
  }

  // optional int32 msg_size = 16;
  if (has_msg_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->msg_size(), target);
  }

  // optional bytes buf = 17;
  if (has_buf()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->buf(), target);
  }

  // optional int64 fh = 18;
  if (has_fh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->fh(), target);
  }

  // optional int32 res = 19;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:File)
  return target;
}

int File::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 oper = 1;
    if (has_oper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oper());
    }

    // optional string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string stbuf = 3;
    if (has_stbuf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stbuf());
    }

    // optional int32 mask = 4;
    if (has_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mask());
    }

    // optional int32 mode = 5;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }

    // optional int64 rdev = 6;
    if (has_rdev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rdev());
    }

    // optional string from = 7;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from());
    }

    // optional string to = 8;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 uid = 9;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 gid = 10;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }

    // optional int32 size = 11;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional int32 flag = 12;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 offset = 13;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // optional int32 statvfs = 14;
    if (has_statvfs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statvfs());
    }

    // optional int32 msg_size = 16;
    if (has_msg_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_size());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bytes buf = 17;
    if (has_buf()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buf());
    }

    // optional int64 fh = 18;
    if (has_fh()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fh());
    }

    // optional int32 res = 19;
    if (has_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }

  }
  // repeated bytes d_name = 15;
  total_size += 1 * this->d_name_size();
  for (int i = 0; i < this->d_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->d_name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void File::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const File* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const File*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void File::MergeFrom(const File& from) {
  GOOGLE_CHECK_NE(&from, this);
  d_name_.MergeFrom(from.d_name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oper()) {
      set_oper(from.oper());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_stbuf()) {
      set_stbuf(from.stbuf());
    }
    if (from.has_mask()) {
      set_mask(from.mask());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_rdev()) {
      set_rdev(from.rdev());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_statvfs()) {
      set_statvfs(from.statvfs());
    }
    if (from.has_msg_size()) {
      set_msg_size(from.msg_size());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_buf()) {
      set_buf(from.buf());
    }
    if (from.has_fh()) {
      set_fh(from.fh());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void File::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void File::CopyFrom(const File& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool File::IsInitialized() const {

  return true;
}

void File::Swap(File* other) {
  if (other != this) {
    std::swap(oper_, other->oper_);
    std::swap(path_, other->path_);
    std::swap(stbuf_, other->stbuf_);
    std::swap(mask_, other->mask_);
    std::swap(mode_, other->mode_);
    std::swap(rdev_, other->rdev_);
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(uid_, other->uid_);
    std::swap(gid_, other->gid_);
    std::swap(size_, other->size_);
    std::swap(flag_, other->flag_);
    std::swap(offset_, other->offset_);
    std::swap(statvfs_, other->statvfs_);
    d_name_.Swap(&other->d_name_);
    std::swap(msg_size_, other->msg_size_);
    std::swap(buf_, other->buf_);
    std::swap(fh_, other->fh_);
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata File::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = File_descriptor_;
  metadata.reflection = File_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
